// Project: Fuzzy LCD Voltmeter
// File: NOKIA_5110.cpp
// Author: Chris Yan
// Created: January, 2012
// Revised: 
//  Desc: Supporting code for the NokiaLcd class
 
#include "NOKIA_5110.h"

// Command Instructions
//       H = 0
#define CMD_DC_CLEAR_DISPLAY   0x08
#define CMD_DC_NORMAL_MODE     0x0C
#define CMD_DC_FILL_DISPLAY    0x09
#define CMD_DC_INVERT_VIDEO    0x0D
#define CMD_FS_HORIZONTAL_MODE 0x00
#define CMD_FS_VERTICAL_MODE   0x02
#define CMD_FS_BASIC_MODE      0x00
#define CMD_FS_EXTENDED_MODE   0x01
#define CMD_FS_ACTIVE_MODE     0x00
#define CMD_FS_POWER_DOWN_MODE 0x04
//       H = 1
#define CMD_TC_TEMP_0          0x04
#define CMD_TC_TEMP_1          0x05
#define CMD_TC_TEMP_2          0x06
#define CMD_TC_TEMP_3          0x07
#define CMD_BI_MUX_24          0x15
#define CMD_BI_MUX_48          0x13
#define CMD_BI_MUX_100         0x10
#define CMD_VOP_6V06           0xB2
#define CMD_VOP_7V38           0xC8
 
// LCD Characteristics
//#define LCD_FREQ 4000000
//#define LCD_SPI_MODE 0x01
//#define LCD_SPI_BITS 0x08

//.....
//.....
//.xxx.
//....x
//.xxxx
//x...x
//.xxx.
//.....

const char FONT_6x6[570] = //should be 564 total char
{ 
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // SPACE   1   32
 0x00, 0x06, 0x2F, 0x06, 0x00, 0x00, // !   2
 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, // "   3
 0x14, 0x3E, 0x14, 0x3E, 0x14, 0x00, // #   4
 0x2E, 0x2A, 0x3F, 0x2A, 0x3A, 0x00, // $   5
 0x26, 0x16, 0x08, 0x34, 0x32, 0x00, // %   6
 0x34, 0x2A, 0x3C, 0x18, 0x28, 0x00, // &   7
 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, // '   8
 0x00, 0x00, 0x1C, 0x36, 0x22, 0x00, // (   9
 0x22, 0x36, 0x1C, 0x00, 0x00, 0x00, // )   10
 0x24, 0x18, 0x0E, 0x18, 0x24, 0x00, // *   11
 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, // +   12
 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, // ,   13
 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, // -   14
 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, // .   15
 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, // /   16
 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00, // 0   17
 0x00, 0x24, 0x3E, 0x20, 0x00, 0x00, // 1   18
 0x32, 0x2A, 0x2A, 0x2A, 0x24, 0x00, // 2   19
 0x2A, 0x2A, 0x2A, 0x2A, 0x14, 0x00, // 3   20
 0x0E, 0x08, 0x08, 0x3E, 0x08, 0x00, // 4   21
 0x2E, 0x2A, 0x2A, 0x2A, 0x12, 0x00, // 5   22
 0x1C, 0x2A, 0x2A, 0x2A, 0x10, 0x00, // 6   23
 0x22, 0x12, 0x0A, 0x06, 0x02, 0x00, // 7   24
 0x14, 0x2A, 0x2A, 0x2A, 0x14, 0x00, // 8   25
 0x04, 0x2A, 0x2A, 0x2A, 0x1c, 0x00, // 9   26
 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, // :   27
 0x00, 0x20, 0x14, 0x00, 0x00, 0x00, // ;   28
 0x00, 0x00, 0x08, 0x14, 0x22, 0x00, // <   29
 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, // =   30
 0x22, 0x14, 0x08, 0x00, 0x00, 0x00, // >   31
 0x06, 0x01, 0x2D, 0x06, 0x00, 0x00, // ?   32
 0x1E, 0x23, 0x19, 0x35, 0x3E, 0x00, // @   33
 0x3C, 0x0A, 0x0A, 0x0A, 0x3C, 0x00, // A   34  //65
 0x3E, 0x2A, 0x2A, 0x2A, 0x1C, 0x00, // B   35
 0x1C, 0x22, 0x22, 0x22, 0x22, 0x00, // C   36
 0x3E, 0x22, 0x22, 0x22, 0x1C, 0x00, // D   37
 0x3E, 0x2A, 0x2A, 0x2A, 0x22, 0x00, // E   38
 0x3E, 0x0A, 0x0A, 0x0A, 0x02, 0x00, // F   39
 0x1C, 0x22, 0x2A, 0x2A, 0x18, 0x00, // G   40
 0x3E, 0x08, 0x08, 0x08, 0x3E, 0x00, // H   40-72
 0x22, 0x22, 0x3E, 0x22, 0x22, 0x00, // I
 0x10, 0x22, 0x22, 0x1E, 0x02, 0x00, // J
 0x3E, 0x08, 0x14, 0x22, 0x00, 0x00, // K
 0x00, 0x3E, 0x20, 0x20, 0x20, 0x00, // L
 0x3E, 0x04, 0x08, 0x04, 0x3E, 0x00, // M   45-77
 0x3E, 0x04, 0x08, 0x10, 0x3E, 0x00, // N
 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00, // O
 0x3E, 0x0A, 0x0A, 0x04, 0x00, 0x00, // P
 0x1C, 0x22, 0x32, 0x3C, 0x20, 0x00, // Q
 0x3E, 0x0A, 0x0A, 0x1A, 0x24, 0x00, // R   50-82
 0x24, 0x2A, 0x2A, 0x2A, 0x12, 0x00, // S
 0x02, 0x02, 0x3E, 0x02, 0x02, 0x00, // T
 0x1E, 0x20, 0x20, 0x20, 0x1E, 0x00, // U
 0x06, 0x18, 0x20, 0x18, 0x06, 0x00, // V
 0x0E, 0x30, 0x18, 0x30, 0x0E, 0x00, // W   55-87
 0x22, 0x14, 0x08, 0x14, 0x22, 0x00, // X
 0x02, 0x04, 0x38, 0x04, 0x02, 0x00, // Y
 0x22, 0x32, 0x2A, 0x26, 0x22, 0x00, // Z
 0x00, 0x00, 0x00, 0x3E, 0x22, 0x00, // [
 0x06, 0x0C, 0x18, 0x30, 0x00, 0x00, // \   60-92
 0x22, 0x3E, 0x00, 0x00, 0x00, 0x00, // ]
 0x00, 0x04, 0x02, 0x02, 0x04, 0x00, // ^
 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // _
 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, // `
 0x18, 0x24, 0x14, 0x38, 0x00, 0x00, // a   65-97
 0x1E, 0x28, 0x28, 0x10, 0x00, 0x00, // b
 0x18, 0x24, 0x24, 0x00, 0x00, 0x00, // c
 0x10, 0x28, 0x28, 0x1E, 0x00, 0x00, // d
 0x18, 0x2C, 0x2C, 0x08, 0x00, 0x00, // e
 0x00, 0x3C, 0x12, 0x04, 0x00, 0x00, // f   70-102
 0x24, 0x2A, 0x1E, 0x00, 0x00, 0x00, // g
 0x3E, 0x08, 0x30, 0x00, 0x00, 0x00, // h
 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, // i
 0x10, 0x20, 0x1A, 0x00, 0x00, 0x00, // j
 0x3E, 0x10, 0x2C, 0x20, 0x00, 0x00, // k   75-107
 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, // l
 0x38, 0x08, 0x18, 0x08, 0x30, 0x00, // m
 0x30, 0x08, 0x08, 0x30, 0x00, 0x00, // n
 0x10, 0x28, 0x28, 0x10, 0x00, 0x00, // o
 0x38, 0x14, 0x14, 0x08, 0x00, 0x00, // p   80-112
 0x08, 0x14, 0x14, 0x38, 0x00, 0x00, // q
 0x3C, 0x08, 0x04, 0x00, 0x00, 0x00, // r
 0x2C, 0x34, 0x00, 0x00, 0x00, 0x00, // s
 0x08, 0x3C, 0x28, 0x00, 0x00, 0x00, // t
 0x18, 0x20, 0x20, 0x18, 0x00, 0x00, // u   85-117
 0x08, 0x10, 0x20, 0x10, 0x08, 0x00, // v
 0x18, 0x20, 0x10, 0x20, 0x18, 0x00, // w
 0x28, 0x10, 0x28, 0x00, 0x00, 0x00, // x
 0x2C, 0x30, 0x1C, 0x00, 0x00, 0x00, // y
 0x24, 0x34, 0x2C, 0x24, 0x00, 0x00, // z   90-122
 0x00, 0x00, 0x08, 0x3E, 0x22, 0x00, // {
 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, // |
 0x22, 0x3E, 0x08, 0x00, 0x00, 0x00, // }
 0x10, 0x08, 0x18, 0x10, 0x08, 0x00, // ~   94
};
 
NokiaLcd::NokiaLcd(SPI *spi, PinName dc, PinName sce, PinName rst)
{
    LcdSpi = spi;
    
    // Control Pins
    RST   = new DigitalOut(rst);
    SCE   = new DigitalOut(sce);
    DC    = new DigitalOut(dc);
}
 
void NokiaLcd::ShutdownLcd()
{
    ClearLcdMem();
    SendCmd( CMD_DC_CLEAR_DISPLAY );
    SendCmd( 0x20 | CMD_FS_POWER_DOWN_MODE | CMD_FS_HORIZONTAL_MODE | CMD_FS_BASIC_MODE );
}
 
void NokiaLcd::ClearLcdMem()
{
    int x,y;
    SCE->write(0);    // Chip Select goes low
    DC->write(1);     // Data/CMD goes high
    
    for(int tick = 0; tick <= 503; tick++)
    {
        LcdSpi->write(0x00);
    }
        
    SCE->write(1);    // Chip Select goes high

    for (y=0; y<6; y++)
    for (x=0; x<14; x++)
    {
        curr[y][x] = ' ';
        next[y][x] = ' ';
    }
    for (y=0; y<6; y++)
      invert[y] = 0;
}
 
void NokiaLcd::TestLcd(char test_pattern)
{
    SCE->write(0);    // Chip Select goes low
    DC->write(1);     // Data/CMD goes high
    
    for(int tick = 0; tick <= 503; tick++)
        LcdSpi->write(test_pattern);         // Command gets sent
    
    SCE->write(1);    // Chip Select goes high
}
 
void NokiaLcd::InitLcd()
{
    ResetLcd();
    
    // Redefine the FunctionChar in case it has changed
    SendCmd( 0x20 | CMD_FS_ACTIVE_MODE | CMD_FS_HORIZONTAL_MODE | CMD_FS_EXTENDED_MODE );   // Extended CMD set
    SendCmd( CMD_VOP_7V38 );         // | Vop
    SendCmd( CMD_TC_TEMP_2 );        // | Temp
    SendCmd( CMD_BI_MUX_48 );        // | Bias
 
    SendCmd( 0x20 | CMD_FS_ACTIVE_MODE | CMD_FS_HORIZONTAL_MODE | CMD_FS_BASIC_MODE );   // Basic CMD set
    SendCmd( CMD_DC_NORMAL_MODE );        // | Display Mode
    
    ClearLcdMem();
    posx = 0;
    posy = 0;
}
 
void NokiaLcd::ResetLcd()
{
    RST->write(0);    // Reset goes low
    RST->write(1);    // Reset goes high
}
 
void NokiaLcd::SendData(char data)
{
    SCE->write(0);    // Chip Select goes low
    DC->write(1);     // Data/CMD goes high
    LcdSpi->write(data);         // Command gets sent
    SCE->write(1);    // Chip Select goes high
}
 
void NokiaLcd::Char(char character, char invert)
{
    for( int i = 0; i < 6; i++)
    {
        char ch = FONT_6x6[ ((character - 32)*6) + i];
        if (invert)
            ch ^=0xff;
        SendData( ch );
    }
}

void NokiaLcd::String(char *str, char invert)
{
    while(*str)
        Char(*str++, invert);
}

void NokiaLcd::SendCmd(char cmd) // TODO::??: Detection of what H should be
{
    SCE->write(0);    // Chip Select goes low
    DC->write(0);     // Data/CMD goes low
    LcdSpi->write(cmd);         // Command gets sent
    DC->write(1);     // Data/CMD goes back to Data mode
    SCE->write(1);    // Chip Select goes high
}
 
NokiaLcd::~NokiaLcd()
{
    ShutdownLcd();
}
 
void NokiaLcd::setDispPos(int DispX, int DispY)
{
    unsigned char Xtemp, Ytemp;
 
    Xtemp = DispX | 0x80;       //add in the column select BIT
    Ytemp = (DispY & 0x07) | 0x40;
    
    SCE->write(0);    // Chip Select goes low
    DC->write(0);     // Data/CMD goes low
    
    LcdSpi->write(Xtemp);         // Command gets sent
    LcdSpi->write(Ytemp);         // Command gets sent
    
    SCE->write(1);    // Chip Select goes high
}
 
//----------------------------------------------------------------------
 
void NokiaLcd::setCharPos(int x, int y)
//x is the character column number 0 to 13. y is the character row number 0 to 5.
//The column is multiplied by 6 to get the display column value, as each 5 x 8 char occupies a 6 x 8 space
{
    unsigned char Xacc;
 
    if (x>13 || y>5) return; //check magnitude of co-ordinates and store
    
    Xacc = x<<2;                //multiply the char column (x) by 6 to get the Display column
    Xacc = Xacc + (x<<1);
    setDispPos(Xacc, y);
}

void NokiaLcd::SetLine(int line, char *str, bool inv)
{
    int x;
    x = 0;
    if (str)
    {
        for (; x<14; x++)
        {
            if (!str[x])
                break;
            next[line][x] = str[x];
        }
    }
    for (; x<14; x++)
        next[line][x] = ' ';
    invert[line] = inv;
}

void NokiaLcd::SetLineX(int x, int line, char *str, bool inv)
{
    int i=0;
    if (str)
    {
        for (; x<14; x++)
        {
            if (!str[i])
                break;
            next[line][x] = str[i];
            i++;
        }
    }
    for (; x<14; x++)
        next[line][x] = ' ';
    invert[line] = inv;
}

void NokiaLcd::Update()
{
    if (posx==0)
        setCharPos(posx, posy);
    Char(next[posy][posx], invert[posy]);
    posx++;
    if (posx>=14)
    {
        posx=0;
        posy++;
        if (posy>=6)
          posy=0;
    }
}

void NokiaLcd::Bitmap(const char *bmap, int bmap_len, int DispX, int DispY)
{
    setDispPos(DispX, DispY);

    int i=0;
    for (; i<bmap_len || i<504; i++)
    {
        SendData( *bmap++ );
    }
    for (; i<504; i++)
        SendData((char)0);
}

void NokiaLcd::Refresh()
{
    Update();
    while (posx || posy)
      Update();
}

void NokiaLcd::ShowSplash(const char *l1, const char *l2, const char *l3)
{
    SetLine(0, (char*)l1, false);
    SetLine(1, (char*)l2, false);
    SetLine(2, (char*)l3, false);
    Refresh();
}

void NokiaLcd::ShowError(const char *str_cons, const char *l1, const char *l2, const char *l3)
{
    printf("\r\n=== ERROR ========================================\r\n");
    printf(str_cons);
    printf("\r\n=== ERROR ========================================\r\n");
    SetLine(3, (char*)l1, false);
    SetLine(4, (char*)l2, false);
    SetLine(5, (char*)l3, false);
    //SetLine(3, (char*)"               ", false);
    //SetLine(4, (char*)"               ", false);
    //SetLine(5, (char*)"               ", false);
    Refresh();
}
