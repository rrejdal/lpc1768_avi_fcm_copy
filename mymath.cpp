#include "mymath.h"
#include "defines.h"

#include "mbed.h"
#include <stddef.h>

#define SIN_PERIOD  4096
#define ATAN_RANGE  1025
#define PIone       102944
#define PIhalf      51472

#define max(a,b) ((a)>(b) ? (a) : (b))

/* 2097152*sin(x*2*PI/4096) x=0..1023 - first 1/4 of the period */
static const int SIN_LUT[(SIN_PERIOD/4)+2] = {
        0,    3217,    6434,    9651,   12868,   16085,   19302,   22519,   25735,   28952,   32169,   35385,   38602,   41818,   45034,   48251,
    51467,   54683,   57898,   61114,   64330,   67545,   70760,   73975,   77190,   80405,   83620,   86834,   90048,   93262,   96476,   99689,
   102902,  106115,  109328,  112541,  115753,  118965,  122176,  125388,  128599,  131810,  135020,  138230,  141440,  144650,  147859,  151068,
   154276,  157484,  160692,  163899,  167106,  170313,  173519,  176725,  179930,  183135,  186339,  189543,  192747,  195950,  199153,  202355,
   205557,  208758,  211959,  215159,  218359,  221558,  224757,  227955,  231153,  234350,  237546,  240742,  243938,  247133,  250327,  253521,
   256714,  259906,  263098,  266289,  269480,  272670,  275859,  279048,  282236,  285424,  288610,  291796,  294982,  298166,  301350,  304534,
   307716,  310898,  314079,  317259,  320439,  323618,  326796,  329973,  333150,  336325,  339500,  342675,  345848,  349020,  352192,  355363,
   358533,  361702,  364871,  368038,  371205,  374371,  377535,  380699,  383862,  387025,  390186,  393346,  396506,  399664,  402822,  405978,
   409134,  412289,  415442,  418595,  421747,  424898,  428048,  431196,  434344,  437491,  440636,  443781,  446925,  450067,  453209,  456349,
   459489,  462627,  465764,  468900,  472035,  475169,  478302,  481433,  484564,  487693,  490822,  493949,  497075,  500199,  503323,  506445,
   509566,  512686,  515805,  518923,  522039,  525154,  528268,  531381,  534492,  537602,  540711,  543819,  546925,  550030,  553134,  556236,
   559337,  562437,  565535,  568633,  571728,  574823,  577916,  581008,  584098,  587187,  590275,  593361,  596446,  599529,  602611,  605692,
   608771,  611849,  614925,  618000,  621073,  624145,  627216,  630285,  633352,  636418,  639483,  642546,  645608,  648667,  651726,  654783,
   657838,  660892,  663944,  666995,  670044,  673092,  676138,  679182,  682225,  685266,  688306,  691344,  694380,  697415,  700448,  703479,
   706509,  709537,  712564,  715589,  718612,  721633,  724653,  727671,  730687,  733701,  736714,  739725,  742735,  745742,  748748,  751752,
   754755,  757755,  760754,  763751,  766746,  769739,  772731,  775721,  778709,  781695,  784679,  787661,  790642,  793621,  796597,  799572,
   802545,  805517,  808486,  811453,  814419,  817382,  820344,  823303,  826261,  829217,  832171,  835123,  838073,  841021,  843967,  846911,
   849853,  852793,  855731,  858667,  861601,  864533,  867462,  870390,  873316,  876240,  879162,  882081,  884999,  887914,  890828,  893739,
   896648,  899555,  902460,  905363,  908264,  911162,  914059,  916953,  919845,  922735,  925623,  928508,  931392,  934273,  937152,  940029,
   942903,  945776,  948646,  951514,  954379,  957243,  960104,  962963,  965820,  968674,  971526,  974376,  977224,  980069,  982912,  985752,
   988591,  991427,  994260,  997092,  999920, 1002747, 1005571, 1008393, 1011213, 1014030, 1016845, 1019657, 1022467, 1025274, 1028079, 1030882,
  1033682, 1036480, 1039276, 1042069, 1044859, 1047647, 1050433, 1053216, 1055997, 1058775, 1061550, 1064324, 1067094, 1069862, 1072628, 1075391,
  1078152, 1080910, 1083665, 1086418, 1089168, 1091916, 1094662, 1097404, 1100144, 1102882, 1105617, 1108349, 1111079, 1113806, 1116530, 1119252,
  1121971, 1124688, 1127402, 1130113, 1132822, 1135528, 1138231, 1140932, 1143629, 1146325, 1149017, 1151707, 1154394, 1157078, 1159760, 1162439,
  1165115, 1167789, 1170459, 1173127, 1175793, 1178455, 1181115, 1183772, 1186426, 1189077, 1191725, 1194371, 1197014, 1199654, 1202291, 1204926,
  1207557, 1210186, 1212812, 1215435, 1218055, 1220673, 1223287, 1225899, 1228507, 1231113, 1233716, 1236316, 1238913, 1241507, 1244098, 1246687,
  1249272, 1251854, 1254434, 1257011, 1259584, 1262155, 1264722, 1267287, 1269849, 1272407, 1274963, 1277516, 1280066, 1282612, 1285156, 1287697,
  1290234, 1292769, 1295300, 1297829, 1300354, 1302877, 1305396, 1307912, 1310425, 1312935, 1315442, 1317946, 1320447, 1322945, 1325439, 1327931,
  1330419, 1332904, 1335386, 1337865, 1340341, 1342814, 1345283, 1347750, 1350213, 1352673, 1355129, 1357583, 1360033, 1362481, 1364924, 1367365,
  1369803, 1372237, 1374668, 1377096, 1379521, 1381942, 1384360, 1386775, 1389187, 1391595, 1394000, 1396402, 1398800, 1401195, 1403587, 1405976,
  1408361, 1410743, 1413122, 1415497, 1417869, 1420238, 1422603, 1424965, 1427324, 1429679, 1432031, 1434380, 1436725, 1439066, 1441405, 1443740,
  1446071, 1448400, 1450724, 1453046, 1455364, 1457678, 1459989, 1462297, 1464601, 1466902, 1469199, 1471493, 1473784, 1476070, 1478354, 1480634,
  1482910, 1485183, 1487453, 1489719, 1491982, 1494241, 1496496, 1498748, 1500996, 1503241, 1505483, 1507720, 1509955, 1512185, 1514413, 1516636,
  1518856, 1521073, 1523286, 1525495, 1527701, 1529903, 1532101, 1534296, 1536487, 1538675, 1540859, 1543040, 1545216, 1547390, 1549559, 1551725,
  1553887, 1556046, 1558201, 1560352, 1562499, 1564643, 1566784, 1568920, 1571053, 1573182, 1575307, 1577429, 1579547, 1581662, 1583772, 1585879,
  1587982, 1590081, 1592177, 1594269, 1596357, 1598442, 1600522, 1602599, 1604672, 1606741, 1608807, 1610869, 1612927, 1614981, 1617031, 1619078,
  1621120, 1623159, 1625194, 1627226, 1629253, 1631277, 1633297, 1635313, 1637325, 1639333, 1641337, 1643338, 1645335, 1647327, 1649316, 1651301,
  1653282, 1655260, 1657233, 1659202, 1661168, 1663130, 1665087, 1667041, 1668991, 1670937, 1672879, 1674817, 1676751, 1678681, 1680608, 1682530,
  1684448, 1686363, 1688273, 1690180, 1692082, 1693980, 1695875, 1697765, 1699652, 1701534, 1703413, 1705287, 1707158, 1709024, 1710887, 1712745,
  1714600, 1716450, 1718296, 1720139, 1721977, 1723811, 1725641, 1727467, 1729289, 1731107, 1732921, 1734731, 1736536, 1738338, 1740135, 1741929,
  1743718, 1745503, 1747285, 1749062, 1750834, 1752603, 1754368, 1756128, 1757885, 1759637, 1761385, 1763129, 1764869, 1766604, 1768336, 1770063,
  1771786, 1773505, 1775220, 1776931, 1778637, 1780340, 1782038, 1783732, 1785421, 1787107, 1788788, 1790465, 1792138, 1793807, 1795471, 1797131,
  1798787, 1800439, 1802087, 1803730, 1805369, 1807004, 1808634, 1810260, 1811882, 1813500, 1815114, 1816723, 1818328, 1819928, 1821525, 1823117,
  1824705, 1826288, 1827867, 1829442, 1831013, 1832579, 1834141, 1835699, 1837252, 1838801, 1840346, 1841886, 1843422, 1844954, 1846481, 1848004,
  1849523, 1851037, 1852547, 1854053, 1855554, 1857051, 1858543, 1860031, 1861515, 1862995, 1864470, 1865940, 1867406, 1868868, 1870326, 1871779,
  1873227, 1874671, 1876111, 1877547, 1878977, 1880404, 1881826, 1883244, 1884657, 1886066, 1887470, 1888870, 1890266, 1891657, 1893043, 1894425,
  1895803, 1897176, 1898545, 1899909, 1901269, 1902624, 1903975, 1905322, 1906663, 1908001, 1909334, 1910662, 1911986, 1913306, 1914621, 1915931,
  1917237, 1918538, 1919835, 1921128, 1922415, 1923699, 1924978, 1926252, 1927522, 1928787, 1930047, 1931303, 1932555, 1933802, 1935045, 1936282,
  1937516, 1938745, 1939969, 1941189, 1942404, 1943614, 1944820, 1946022, 1947218, 1948411, 1949598, 1950781, 1951960, 1953134, 1954303, 1955468,
  1956628, 1957783, 1958934, 1960080, 1961222, 1962359, 1963491, 1964619, 1965742, 1966861, 1967975, 1969084, 1970189, 1971289, 1972384, 1973475,
  1974561, 1975642, 1976719, 1977791, 1978859, 1979922, 1980980, 1982033, 1983082, 1984127, 1985166, 1986201, 1987231, 1988257, 1989277, 1990294,
  1991305, 1992312, 1993314, 1994311, 1995304, 1996292, 1997275, 1998254, 1999228, 2000197, 2001161, 2002121, 2003076, 2004027, 2004972, 2005913,
  2006849, 2007781, 2008708, 2009630, 2010547, 2011460, 2012367, 2013270, 2014169, 2015062, 2015951, 2016835, 2017715, 2018589, 2019459, 2020325,
  2021185, 2022041, 2022891, 2023738, 2024579, 2025415, 2026247, 2027074, 2027897, 2028714, 2029527, 2030335, 2031138, 2031936, 2032730, 2033519,
  2034303, 2035082, 2035857, 2036626, 2037391, 2038151, 2038907, 2039657, 2040403, 2041144, 2041880, 2042611, 2043338, 2044059, 2044776, 2045488,
  2046196, 2046898, 2047596, 2048289, 2048977, 2049660, 2050338, 2051012, 2051680, 2052344, 2053003, 2053657, 2054307, 2054951, 2055591, 2056226,
  2056856, 2057481, 2058101, 2058717, 2059327, 2059933, 2060534, 2061130, 2061722, 2062308, 2062890, 2063466, 2064038, 2064605, 2065167, 2065725,
  2066277, 2066825, 2067367, 2067905, 2068438, 2068966, 2069489, 2070008, 2070521, 2071030, 2071534, 2072032, 2072526, 2073015, 2073500, 2073979,
  2074453, 2074923, 2075388, 2075848, 2076303, 2076753, 2077198, 2077638, 2078073, 2078504, 2078930, 2079350, 2079766, 2080177, 2080583, 2080984,
  2081380, 2081772, 2082158, 2082540, 2082916, 2083288, 2083655, 2084017, 2084374, 2084726, 2085073, 2085416, 2085753, 2086086, 2086413, 2086736,
  2087054, 2087367, 2087674, 2087978, 2088276, 2088569, 2088857, 2089141, 2089419, 2089693, 2089961, 2090225, 2090484, 2090738, 2090987, 2091231,
  2091470, 2091704, 2091933, 2092158, 2092377, 2092591, 2092801, 2093006, 2093205, 2093400, 2093590, 2093775, 2093955, 2094130, 2094300, 2094466,
  2094626, 2094781, 2094932, 2095077, 2095218, 2095354, 2095484, 2095610, 2095731, 2095847, 2095958, 2096064, 2096165, 2096261, 2096353, 2096439,
  2096520, 2096597, 2096668, 2096735, 2096797, 2096853, 2096905, 2096952, 2096994, 2097031, 2097063, 2097090, 2097113, 2097130, 2097142, 2097150,
  2097152, 2097152};

/* 32768*atan(x/1024) x=0..1024, first 45 degrees */
static const unsigned short int ATAN_LUT[ATAN_RANGE+1] = {
0,32,64,96,128,160,192,224,256,288,320,352,384,416,448,480,512,544,576,608,640,672,704,736,768,800,832,864,896,928,960,992,
1024,1056,1088,1120,1152,1183,1215,1247,1279,1311,1343,1375,1407,1439,1471,1503,1535,1567,1599,1631,1663,1694,1726,1758,1790,
1822,1854,1886,1918,1950,1982,2013,2045,2077,2109,2141,2173,2205,2237,2268,2300,2332,2364,2396,2428,2459,2491,2523,2555,2587,
2618,2650,2682,2714,2746,2777,2809,2841,2873,2904,2936,2968,3000,3031,3063,3095,3126,3158,3190,3222,3253,3285,3317,3348,3380,
3412,3443,3475,3507,3538,3570,3601,3633,3665,3696,3728,3759,3791,3823,3854,3886,3917,3949,3980,4012,4043,4075,4106,4138,4169,
4201,4232,4264,4295,4327,4358,4390,4421,4452,4484,4515,4547,4578,4609,4641,4672,4703,4735,4766,4797,4829,4860,4891,4923,4954,
4985,5016,5048,5079,5110,5141,5173,5204,5235,5266,5297,5329,5360,5391,5422,5453,5484,5515,5546,5578,5609,5640,5671,5702,5733,
5764,5795,5826,5857,5888,5919,5950,5981,6012,6043,6073,6104,6135,6166,6197,6228,6259,6290,6320,6351,6382,6413,6444,6474,6505,
6536,6567,6597,6628,6659,6689,6720,6751,6781,6812,6843,6873,6904,6935,6965,6996,7026,7057,7087,7118,7148,7179,7209,7240,7270,
7301,7331,7362,7392,7422,7453,7483,7513,7544,7574,7604,7635,7665,7695,7726,7756,7786,7816,7847,7877,7907,7937,7967,7997,8027,
8058,8088,8118,8148,8178,8208,8238,8268,8298,8328,8358,8388,8418,8448,8478,8508,8537,8567,8597,8627,8657,8687,8716,8746,8776,
8806,8835,8865,8895,8925,8954,8984,9014,9043,9073,9102,9132,9162,9191,9221,9250,9280,9309,9339,9368,9398,9427,9456,9486,9515,
9545,9574,9603,9633,9662,9691,9720,9750,9779,9808,9837,9867,9896,9925,9954,9983,10012,10041,10070,10100,10129,10158,10187,10216,
10245,10274,10303,10331,10360,10389,10418,10447,10476,10505,10534,10562,10591,10620,10649,10677,10706,10735,10763,10792,10821,
10849,10878,10907,10935,10964,10992,11021,11049,11078,11106,11135,11163,11192,11220,11248,11277,11305,11333,11362,11390,11418,
11447,11475,11503,11531,11559,11588,11616,11644,11672,11700,11728,11756,11784,11812,11840,11868,11896,11924,11952,11980,12008,
12036,12064,12092,12119,12147,12175,12203,12231,12258,12286,12314,12341,12369,12397,12424,12452,12479,12507,12535,12562,12590,
12617,12645,12672,12699,12727,12754,12782,12809,12836,12864,12891,12918,12946,12973,13000,13027,13054,13082,13109,13136,13163,
13190,13217,13244,13271,13298,13325,13352,13379,13406,13433,13460,13487,13514,13541,13568,13594,13621,13648,13675,13701,13728,
13755,13781,13808,13835,13861,13888,13915,13941,13968,13994,14021,14047,14074,14100,14126,14153,14179,14206,14232,14258,14285,
14311,14337,14363,14390,14416,14442,14468,14494,14520,14547,14573,14599,14625,14651,14677,14703,14729,14755,14781,14807,14832,
14858,14884,14910,14936,14962,14987,15013,15039,15065,15090,15116,15142,15167,15193,15218,15244,15270,15295,15321,15346,15372,
15397,15422,15448,15473,15499,15524,15549,15575,15600,15625,15650,15676,15701,15726,15751,15776,15801,15827,15852,15877,15902,
15927,15952,15977,16002,16027,16052,16077,16101,16126,16151,16176,16201,16226,16250,16275,16300,16324,16349,16374,16398,16423,
16448,16472,16497,16521,16546,16570,16595,16619,16644,16668,16693,16717,16741,16766,16790,16814,16839,16863,16887,16911,16935,
16960,16984,17008,17032,17056,17080,17104,17128,17152,17176,17200,17224,17248,17272,17296,17320,17344,17368,17391,17415,17439,
17463,17486,17510,17534,17557,17581,17605,17628,17652,17676,17699,17723,17746,17770,17793,17816,17840,17863,17887,17910,17933,
17957,17980,18003,18027,18050,18073,18096,18119,18143,18166,18189,18212,18235,18258,18281,18304,18327,18350,18373,18396,18419,
18442,18465,18488,18510,18533,18556,18579,18602,18624,18647,18670,18692,18715,18738,18760,18783,18806,18828,18851,18873,18896,
18918,18941,18963,18985,19008,19030,19053,19075,19097,19120,19142,19164,19186,19209,19231,19253,19275,19297,19319,19341,19363,
19386,19408,19430,19452,19474,19496,19517,19539,19561,19583,19605,19627,19649,19670,19692,19714,19736,19757,19779,19801,19823,
19844,19866,19887,19909,19931,19952,19974,19995,20017,20038,20059,20081,20102,20124,20145,20166,20188,20209,20230,20252,20273,
20294,20315,20336,20358,20379,20400,20421,20442,20463,20484,20505,20526,20547,20568,20589,20610,20631,20652,20673,20694,20714,
20735,20756,20777,20798,20818,20839,20860,20880,20901,20922,20942,20963,20984,21004,21025,21045,21066,21086,21107,21127,21148,
21168,21188,21209,21229,21249,21270,21290,21310,21331,21351,21371,21391,21411,21432,21452,21472,21492,21512,21532,21552,21572,
21592,21612,21632,21652,21672,21692,21712,21732,21752,21772,21791,21811,21831,21851,21870,21890,21910,21930,21949,21969,21989,
22008,22028,22047,22067,22086,22106,22126,22145,22164,22184,22203,22223,22242,22262,22281,22300,22320,22339,22358,22377,22397,
22416,22435,22454,22473,22493,22512,22531,22550,22569,22588,22607,22626,22645,22664,22683,22702,22721,22740,22759,22778,22797,
22815,22834,22853,22872,22891,22909,22928,22947,22966,22984,23003,23022,23040,23059,23077,23096,23115,23133,23152,23170,23189,
23207,23226,23244,23262,23281,23299,23318,23336,23354,23373,23391,23409,23427,23446,23464,23482,23500,23518,23536,23555,23573,
23591,23609,23627,23645,23663,23681,23699,23717,23735,23753,23771,23789,23807,23825,23842,23860,23878,23896,23914,23931,23949,
23967,23985,24002,24020,24038,24055,24073,24091,24108,24126,24143,24161,24178,24196,24213,24231,24248,24266,24283,24301,24318,
24335,24353,24370,24387,24405,24422,24439,24456,24474,24491,24508,24525,24542,24560,24577,24594,24611,24628,24645,24662,24679,
24696,24713,24730,24747,24764,24781,24798,24815,24832,24849,24866,24882,24899,24916,24933,24950,24966,24983,25000,25017,25033,
25050,25067,25083,25100,25117,25133,25150,25166,25183,25199,25216,25232,25249,25265,25282,25298,25315,25331,25347,25364,25380,
25396,25413,25429,25445,25462,25478,25494,25510,25527,25543,25559,25575,25591,25607,25624,25640,25656,25672,25688,25704,25720,
25736, 25752};

/* 32768*asin(x/1024) x=0..1024 representing 0..1, output is in rad*32768 */
static const unsigned short int ASIN_LUT[1026] = {
0,    32,    64,    96,   128,   160,   192,   224,   256,   288,   320,   352,   384,   416,   448,   480,
512,   544,   576,   608,   640,   672,   704,   736,   768,   800,   832,   864,   896,   928,   960,   992,
1024,  1056,  1088,  1120,  1152,  1184,  1216,  1248,  1280,  1312,  1344,  1376,  1408,  1440,  1472,  1505,
1537,  1569,  1601,  1633,  1665,  1697,  1729,  1761,  1793,  1825,  1857,  1889,  1921,  1953,  1985,  2017,
2049,  2081,  2113,  2146,  2178,  2210,  2242,  2274,  2306,  2338,  2370,  2402,  2434,  2466,  2498,  2531,
2563,  2595,  2627,  2659,  2691,  2723,  2755,  2787,  2819,  2852,  2884,  2916,  2948,  2980,  3012,  3044,
3077,  3109,  3141,  3173,  3205,  3237,  3269,  3302,  3334,  3366,  3398,  3430,  3462,  3495,  3527,  3559,
3591,  3623,  3656,  3688,  3720,  3752,  3784,  3817,  3849,  3881,  3913,  3946,  3978,  4010,  4042,  4074,
4107,  4139,  4171,  4204,  4236,  4268,  4300,  4333,  4365,  4397,  4429,  4462,  4494,  4526,  4559,  4591,
4623,  4656,  4688,  4720,  4753,  4785,  4817,  4850,  4882,  4914,  4947,  4979,  5012,  5044,  5076,  5109,
5141,  5173,  5206,  5238,  5271,  5303,  5336,  5368,  5400,  5433,  5465,  5498,  5530,  5563,  5595,  5628,
5660,  5693,  5725,  5758,  5790,  5823,  5855,  5888,  5920,  5953,  5985,  6018,  6050,  6083,  6115,  6148,
6181,  6213,  6246,  6278,  6311,  6344,  6376,  6409,  6441,  6474,  6507,  6539,  6572,  6605,  6637,  6670,
6703,  6735,  6768,  6801,  6833,  6866,  6899,  6932,  6964,  6997,  7030,  7063,  7095,  7128,  7161,  7194,
7226,  7259,  7292,  7325,  7358,  7390,  7423,  7456,  7489,  7522,  7555,  7588,  7621,  7653,  7686,  7719,
7752,  7785,  7818,  7851,  7884,  7917,  7950,  7983,  8016,  8049,  8082,  8115,  8148,  8181,  8214,  8247,
8280,  8313,  8346,  8379,  8412,  8445,  8478,  8511,  8545,  8578,  8611,  8644,  8677,  8710,  8743,  8777,
8810,  8843,  8876,  8909,  8943,  8976,  9009,  9042,  9076,  9109,  9142,  9175,  9209,  9242,  9275,  9309,
9342,  9375,  9409,  9442,  9476,  9509,  9542,  9576,  9609,  9643,  9676,  9709,  9743,  9776,  9810,  9843,
9877,  9910,  9944,  9977, 10011, 10045, 10078, 10112, 10145, 10179, 10213, 10246, 10280, 10313, 10347, 10381,
10414, 10448, 10482, 10516, 10549, 10583, 10617, 10651, 10684, 10718, 10752, 10786, 10820, 10853, 10887, 10921,
10955, 10989, 11023, 11057, 11091, 11124, 11158, 11192, 11226, 11260, 11294, 11328, 11362, 11396, 11430, 11464,
11499, 11533, 11567, 11601, 11635, 11669, 11703, 11737, 11772, 11806, 11840, 11874, 11908, 11943, 11977, 12011,
12045, 12080, 12114, 12148, 12183, 12217, 12251, 12286, 12320, 12355, 12389, 12424, 12458, 12492, 12527, 12561,
12596, 12630, 12665, 12700, 12734, 12769, 12803, 12838, 12873, 12907, 12942, 12977, 13011, 13046, 13081, 13115,
13150, 13185, 13220, 13254, 13289, 13324, 13359, 13394, 13429, 13464, 13499, 13533, 13568, 13603, 13638, 13673,
13708, 13743, 13778, 13814, 13849, 13884, 13919, 13954, 13989, 14024, 14059, 14095, 14130, 14165, 14200, 14236,
14271, 14306, 14341, 14377, 14412, 14448, 14483, 14518, 14554, 14589, 14625, 14660, 14696, 14731, 14767, 14802,
14838, 14873, 14909, 14945, 14980, 15016, 15052, 15087, 15123, 15159, 15195, 15230, 15266, 15302, 15338, 15374,
15410, 15446, 15482, 15518, 15553, 15589, 15625, 15662, 15698, 15734, 15770, 15806, 15842, 15878, 15914, 15950,
15987, 16023, 16059, 16095, 16132, 16168, 16204, 16241, 16277, 16314, 16350, 16386, 16423, 16459, 16496, 16533,
16569, 16606, 16642, 16679, 16716, 16752, 16789, 16826, 16862, 16899, 16936, 16973, 17010, 17047, 17083, 17120,
17157, 17194, 17231, 17268, 17305, 17342, 17379, 17417, 17454, 17491, 17528, 17565, 17602, 17640, 17677, 17714,
17752, 17789, 17826, 17864, 17901, 17939, 17976, 18014, 18051, 18089, 18126, 18164, 18202, 18239, 18277, 18315,
18353, 18390, 18428, 18466, 18504, 18542, 18580, 18618, 18656, 18694, 18732, 18770, 18808, 18846, 18884, 18922,
18960, 18999, 19037, 19075, 19114, 19152, 19190, 19229, 19267, 19306, 19344, 19383, 19421, 19460, 19498, 19537,
19576, 19615, 19653, 19692, 19731, 19770, 19809, 19848, 19886, 19925, 19964, 20003, 20043, 20082, 20121, 20160,
20199, 20238, 20278, 20317, 20356, 20396, 20435, 20474, 20514, 20553, 20593, 20633, 20672, 20712, 20752, 20791,
20831, 20871, 20911, 20950, 20990, 21030, 21070, 21110, 21150, 21190, 21230, 21271, 21311, 21351, 21391, 21432,
21472, 21512, 21553, 21593, 21634, 21674, 21715, 21755, 21796, 21837, 21877, 21918, 21959, 22000, 22041, 22082,
22123, 22164, 22205, 22246, 22287, 22328, 22369, 22411, 22452, 22493, 22535, 22576, 22618, 22659, 22701, 22742,
22784, 22826, 22867, 22909, 22951, 22993, 23035, 23077, 23119, 23161, 23203, 23245, 23287, 23330, 23372, 23414,
23457, 23499, 23541, 23584, 23627, 23669, 23712, 23755, 23797, 23840, 23883, 23926, 23969, 24012, 24055, 24098,
24141, 24185, 24228, 24271, 24315, 24358, 24402, 24445, 24489, 24532, 24576, 24620, 24664, 24708, 24751, 24795,
24839, 24884, 24928, 24972, 25016, 25061, 25105, 25149, 25194, 25238, 25283, 25328, 25372, 25417, 25462, 25507,
25552, 25597, 25642, 25687, 25732, 25778, 25823, 25868, 25914, 25959, 26005, 26051, 26096, 26142, 26188, 26234,
26280, 26326, 26372, 26418, 26465, 26511, 26557, 26604, 26650, 26697, 26744, 26790, 26837, 26884, 26931, 26978,
27025, 27072, 27120, 27167, 27214, 27262, 27309, 27357, 27405, 27453, 27500, 27548, 27596, 27645, 27693, 27741,
27789, 27838, 27886, 27935, 27983, 28032, 28081, 28130, 28179, 28228, 28277, 28326, 28376, 28425, 28475, 28524,
28574, 28624, 28674, 28724, 28774, 28824, 28874, 28925, 28975, 29026, 29076, 29127, 29178, 29229, 29280, 29331,
29382, 29433, 29485, 29536, 29588, 29640, 29691, 29743, 29795, 29847, 29900, 29952, 30005, 30057, 30110, 30163,
30216, 30269, 30322, 30375, 30428, 30482, 30535, 30589, 30643, 30697, 30751, 30805, 30860, 30914, 30969, 31023,
31078, 31133, 31188, 31243, 31299, 31354, 31410, 31466, 31521, 31577, 31634, 31690, 31746, 31803, 31860, 31917,
31974, 32031, 32088, 32145, 32203, 32261, 32319, 32377, 32435, 32493, 32552, 32611, 32670, 32729, 32788, 32847,
32907, 32966, 33026, 33086, 33147, 33207, 33268, 33328, 33389, 33450, 33512, 33573, 33635, 33697, 33759, 33821,
33884, 33946, 34009, 34072, 34136, 34199, 34263, 34327, 34391, 34455, 34520, 34585, 34650, 34715, 34780, 34846,
34912, 34978, 35045, 35112, 35179, 35246, 35313, 35381, 35449, 35517, 35586, 35655, 35724, 35793, 35863, 35933,
36003, 36073, 36144, 36215, 36287, 36358, 36430, 36503, 36576, 36649, 36722, 36796, 36870, 36944, 37019, 37094,
37170, 37246, 37322, 37398, 37475, 37553, 37631, 37709, 37788, 37867, 37946, 38026, 38107, 38188, 38269, 38351,
38433, 38516, 38599, 38683, 38768, 38853, 38938, 39024, 39111, 39198, 39286, 39374, 39463, 39553, 39643, 39734,
39825, 39918, 40011, 40104, 40199, 40294, 40390, 40487, 40585, 40683, 40783, 40883, 40984, 41087, 41190, 41294,
41399, 41505, 41613, 41721, 41831, 41942, 42054, 42168, 42283, 42399, 42517, 42636, 42757, 42880, 43004, 43130,
43258, 43388, 43520, 43655, 43791, 43930, 44072, 44216, 44363, 44514, 44667, 44824, 44985, 45150, 45319, 45493,
45672, 45856, 46047, 46245, 46450, 46665, 46889, 47124, 47373, 47638, 47923, 48232, 48575, 48963, 49424, 50024,
51472, 51472};

/* input is from 0-4095*256 */
static float SINi(int f)
{
    int neg = false;
    int s1, s2, s3;
    int r = f & 0xff;
    f = (f>>8) & 0xfff;
    if (f>=(SIN_PERIOD/2))
    {
        f-=(SIN_PERIOD/2);
        neg = true;
    }
    if (f>=(SIN_PERIOD/4))
    {
        f = (SIN_PERIOD/2)-f;
        s1 = SIN_LUT[f];
        s2 = SIN_LUT[f-1];
    }
    else
    {
        s1 = SIN_LUT[f];
        s2 = SIN_LUT[f+1];
    }
    s3 = (s1*(256-r) + s2*r);
    if (neg)
        s3 = -s3;
    return (((float)s3)/(2097152*256));
}

/* input in degrees, max error 0.002287 */
float SINfD(float a)
{
    if (a<0)
    {
        int f = (int)((-a)*(11.377777778f*256.0f));
        return -SINi(f);
    }
    else
    {
        int f = (int)(a*(11.377777778f*256.0f));
        return SINi(f);
    }
}

/* input in radians */
float SINfR(float a)
{
    if (a<0)
    {
        int f = (int)((-a)*(651.898646f*256.0f));
        return -SINi(f);
    }
    else
    {
        int f = (int)(a*(651.898646f*256.0f));
        return SINi(f);
    }
}

static float COSi(int f)
{
    int neg = false;
    int s1, s2, s3, r;

    f+=1024*256;
    r = f & 0xff;
    f = (f>>8) & 0xfff;

    if (f>=(SIN_PERIOD/2))
    {
        f-=(SIN_PERIOD/2);
        neg = true;
    }
    if (f>=(SIN_PERIOD/4))
    {
        f = (SIN_PERIOD/2)-f;
        s1 = SIN_LUT[f];
        s2 = SIN_LUT[f-1];
    }
    else
    {
        s1 = SIN_LUT[f];
        s2 = SIN_LUT[f+1];
    }
    s3 = (s1*(256-r) + s2*r);
    if (neg)
        s3 = -s3;
    return (((float)s3)/(2097152*256));
}

/* input in degrees */
float COSfD(float a)
{
    int f = (int)(ABS(a)*(11.377777778f*256.0f));
    return COSi(f);
}

/* input in radians */
float COSfR(float a)
{
    int f = (int)(ABS(a)*(651.898646f*256.0f));
    return COSi(f);
}

// 1/cos(x)
/*float iCOSfR(float a)
{
    int neg = false;
    int s;
    int f = (int)(a*651.898646f+0.5f);
    f+=1024;
    f = f & 0xfff;
    if (f>=(SIN_PERIOD/2))
    {
        f-=(SIN_PERIOD/2);
        neg = true;
    }
    if (f>=(SIN_PERIOD/4))
        f = (SIN_PERIOD/2)-f;
    s = SIN_LUT[f];
    if (neg)
        s = -s;
    return (2097152/((float)s));
}*/

// asin(x)
float ASINfR(float a)
{
    int neg = false;
    int s1, s2, s3;
    int f, r;
    if (a<0)
    {
        a = -a;
        neg = true;
    }
    f = (int)(a*(1024*256));
    if (f>262144)
        f = 262144;
    r = f & 0xff;
    f>>=8;
    s1 = ASIN_LUT[f];
    s2 = ASIN_LUT[f+1];
    s3 = (s1*(256-r) + s2*r);
    if (neg)
        s3 = -s3;
    return (((float)s3)/(32768*256));
}

/*
inline static unsigned divu10(unsigned n)
{
    unsigned q, r;
    q = (n >> 1) + (n >> 2);
    q = q + (q >> 4);
    q = q + (q >> 8);
    q = q + (q >> 16);
    q = q >> 3;
    r = n - q*10;
    return q + ((r + 6) >> 4);
}
*/
int PRINTd(char *str, int d, int minsize, int leading0, int plus)
{
    char s[20];
    int i, p=0;
    int neg = 0;
    int size=0;

    if (minsize>=20)
      return 0;

    if (d<0)
    {
        d = -d;
        neg = 1;
    }

    /* limit the max value to 10M */
    if (d>=100000000)
        d=99999999;
    while (d>=10)
    {
        int d1 = d/10;
        int dr = d-d1*10;
        s[p++] = '0'+dr;
        d = d1;
    }
    s[p++] = '0'+d;

    if (leading0)
    {
      /* sign */
      if (neg || plus)
        minsize--;
      /* sign */
      if (neg)
      {
        *str++ = '-';
        size++;
      }
      else if (plus)
      {
        *str++ = '+';
        size++;
      }
      /* left stuffing */
      if (p<minsize)
      {
        for (i=p; i<minsize; i++)
          *str++ = '0';
        size+=minsize-p;
      }
    }
    else
    {
      /* sign */
      if (neg || plus)
        minsize--;
      /* left stuffing */
      if (p<minsize)
      {
        for (i=p; i<minsize; i++)
          *str++ = ' ';
        size+=minsize-p;
      }
      /* sign */
      if (neg)
      {
        *str++ = '-';
        size++;
      }
      else if (plus)
      {
        *str++ = '+';
        size++;
      }
    }

    for (i=0; i<p; i++)
      *str++ = s[p-1-i];
    *str++ = 0;
    return size+p;
}

int PRINTf(char *str, float f, int minsize, int decimals, int plus)
{
    char strl[20];
    char *strp = strl;
    int fi;
    int size = 0;
    int s1, i;
    float md = 0;

    if (minsize>=20)
      return 0;

    /* sign */
    if (f<0)
    {
      *strp++ = '-';
      size++;
      f = -f;
    }
    else if (plus)
    {
      *strp++ = '+';
      size++;
    }

    if (decimals==0)
      f+=0.5f;
    else
    if (decimals==1)
    {
      f+=0.05f;
      md=10;
    }
    else
    if (decimals==2)
    {
      f+=0.005f;
      md=100;
    }
    else
    if (decimals==3)
    {
      f+=0.0005f;
      md=1000;
    }
    else
    {
      f+=0.00005f;
      md=10000;
    }
    fi = (int)f;
    s1 = PRINTd(strp, fi, 0, 0, 0);
    strp += s1;
    size += s1;
    f = f-fi;
    if (decimals>0)
    {
        *strp++ = '.';
        size++;
        f=f*md;
        size += PRINTd(strp, (int)f, decimals, 1, 0);
    }
    /* minsize stuffing */
    if (size < minsize)
      for (i=size; i<minsize; i++)
        *str++ = ' ';
    /* copy to output */
    for (i=0; i<size; i++)
      *str++ = strl[i];
    *str++ = 0;
    return max(size, minsize);
}

int PRINTs(char *str, char *instr)
{
  int size = 0;
  while (1)
  {
    char c = *instr++;
    *str++ = c;
    if (!c)
      break;
    size++;
  }
  return size;
}

/* string format: %[+][0][1-9][.][0-9]d/f/%
** sign, leading zeros, minimum total size including sign (single digit limit), decimal digits (0-4 limit) */
int sPRINTlist(char *out, char *mask, int *d, float *f, int dcount, int fcount)
{
  int size = 0;
  int state = 0;
  char plus = 0;
  char leading0 = 0;
  char minsize = 0;
  char decimals = 0;

  while (1)
  {
    char c = *mask++;
    if (!c)
      break;

    if (!state)
    {
      if (c=='%')
      {
        state    = 1;
        plus     = 0;
        leading0 = 0;
        minsize  = 0;
        decimals = 0;
      }
      else
      {
        *out++ = c;
        size++;
      }
    }
    else
    {
      if (c=='d')
      {
        /* insert integer */
        if (d && dcount)
        {
          int s=PRINTd(out, *d++, minsize, leading0, plus);
          size+=s;
          out+=s;
          dcount--;
        }
        state = 0;
      }
      else
      if (c=='f')
      {
        /* insert float */
        if (f && fcount)
        {
          int s=PRINTf(out, *f++, minsize, decimals, plus);
          size+=s;
          out+=s;
          fcount--;
        }
        state = 0;
      }
      else
      if (c=='%' && state==1)
      {
        *out++ = '%';
        size++;
        state = 0;
      }
      else
      if (c=='+' && state==1)
      {
        plus = 1;
        state = 2;
      }
      else
      if (c=='0' && state<3)
      {
        leading0 = 1;
        state = 3;
      }
      else
      if (c>'0' && c<='9' && state<4)
      {
        minsize = c-'0';
        state = 4;
      }
      else
      if (c=='.' && state<5)
      {
        state = 5;
      }
      else
      if (c>='0' && c<='9' && state<6)
      {
        decimals = c-'0';
        state = 6;
      }
      else
        state = 0;
    }
  }

  *out++=0;
  return size;
}

int sPRINTd(char *out, char *mask, int d1)
{
  int d[2];
  d[0] = d1;

  return sPRINTlist(out, mask, d, NULL, 1, 0);
}

int sPRINTdd(char *out, char *mask, int d1, int d2)
{
  int d[2];
  d[0] = d1;
  d[1] = d2;

  return sPRINTlist(out, mask, d, NULL, 2, 0);
}

int sPRINTddd(char *out, char *mask, int d1, int d2, int d3)
{
  int d[3];
  d[0] = d1;
  d[1] = d2;
  d[2] = d3;

  return sPRINTlist(out, mask, d, NULL, 3, 0);
}

int sPRINTf(char *out, char *mask, float f1)
{
  float f[2];
  f[0] = f1;

  return sPRINTlist(out, mask, NULL, f, 0, 1);
}

int sPRINTdf(char *out, char *mask, int d1, float f1)
{
  int d[2];
  float f[2];
  d[0] = d1;
  f[0] = f1;

  return sPRINTlist(out, mask, d, f, 1, 1);
}

int sPRINTddf(char *out, char *mask, int d1, int d2, float f1)
{
  int d[2];
  float f[2];
  d[0] = d1;
  d[1] = d2;
  f[0] = f1;

  return sPRINTlist(out, mask, d, f, 2, 1);
}

int sPRINTfd(char *out, char *mask, float f1, int d1)
{
  int d[2];
  float f[2];
  d[0] = d1;
  f[0] = f1;

  return sPRINTlist(out, mask, d, f, 1, 1);
}

int sPRINTff(char *out, char *mask, float f1, float f2)
{
  float f[2];
  f[0] = f1;
  f[1] = f2;

  return sPRINTlist(out, mask, NULL, f, 1, 2);
}

/* abs(x/y) needs to be smaller than MAX_INT/2048
** output angle is in rad*32768*256 */
/* x is horizontal, y vertical */
int ATAN2i(float y, float x)
{
    int a,r1, r2, r3, re;
    if (!x && !y)
      return 0;
      
    if (y>=0)
    {
        /* y positive */
        if (x>=0)
        {
            if (x>=y)
            {
                /* 1. 0-45 */
                a = (int)(262144.0f*y/x);
                re = a & 0xff;
                a>>=8;
                r1 = ATAN_LUT[a];
                r2 = ATAN_LUT[a+1];
                r3 = r1 * (256-re) + r2 * re;
                return r3;
            }
            else
            {
                /* 2. 45-90 */
                a = (int)(262144.0f*x/y);
                re = a & 0xff;
                a>>=8;
                r1 = ATAN_LUT[a];
                r2 = ATAN_LUT[a+1];
                r3 = r1 * (256-re) + r2 * re;
                return (PIhalf*256-r3);
            }
        }
        else
        {
            x =-x;
            if (y>x)
            {
                /* 3. 90-135 */
                a = (int)(262144.0f*x/y);
                re = a & 0xff;
                a>>=8;
                r1 = ATAN_LUT[a];
                r2 = ATAN_LUT[a+1];
                r3 = r1 * (256-re) + r2 * re;
                return (PIhalf*256+r3);
            }
            else
            {
                /* 4. 135-180 */
                a = (int)(262144.0f*y/x);
                re = a & 0xff;
                a>>=8;
                r1 = ATAN_LUT[a];
                r2 = ATAN_LUT[a+1];
                r3 = r1 * (256-re) + r2 * re;
                return (PIone*256-r3);
            }
        }
    }
    else
    {
        /* y negative */
        y = -y;
        if (x<0)
        {
            x =-x;
            if (x>=y)
            {
                /* 5. 180-225 */
                a = (int)(262144.0f*y/x);
                re = a & 0xff;
                a>>=8;
                r1 = ATAN_LUT[a];
                r2 = ATAN_LUT[a+1];
                r3 = r1 * (256-re) + r2 * re;
                return (r3-PIone*256);
            }
            else
            {
                /* 6. 225-270 */
                a = (int)(262144.0f*x/y);
                re = a & 0xff;
                a>>=8;
                r1 = ATAN_LUT[a];
                r2 = ATAN_LUT[a+1];
                r3 = r1 * (256-re) + r2 * re;
                return (-PIhalf*256-r3);
            }
        }
        else
        {
            if (y>x)
            {
                /* 7. 270-315 */
                a = (int)(262144.0f*x/y);
                re = a & 0xff;
                a>>=8;
                r1 = ATAN_LUT[a];
                r2 = ATAN_LUT[a+1];
                r3 = r1 * (256-re) + r2 * re;
                return (r3-PIhalf*256);
            }
            else
            {
                /* 8. 315-360 */
                a = (int)(262144.0f*y/x);
                re = a & 0xff;
                a>>=8;
                r1 = ATAN_LUT[a];
                r2 = ATAN_LUT[a+1];
                r3 = r1 * (256-re) + r2 * re;
                return (-r3);
            }
        }
    }
}

/* returns degrees, max error is 0.001526deg */
float ATAN2fD(float y, float x)
{
  return ATAN2i(y, x)*(0.00174852843f/256.0f);
}

/* returns radians, max error is 0.000024rad */
float ATAN2fR(float y, float x)
{
  return ATAN2i(y, x)*(0.000030517578125f/256.0f);
}

/* power(index/2, 1.7) */
static const float POW1_7_2x[101] = {
0, 0.3077861033f, 1, 1.9923018599f, 3.2490095854f,   4.7478612058f,   6.4730078399f,   8.4123178837f,  10.5560632862f,  12.8961855587f,
 15.425846568f,   18.1391349625f,  21.0308645184f,  24.0964300961f,  27.3317014399f,  30.7329428082f,  34.2967508012f,  38.0200053564f,
 41.8998304957f,  45.9335624365f,  50.1187233627f,  54.4529996133f,  58.9342233643f,  63.5603571103f,  68.3294804102f,  73.2397784873f,
 78.2895323568f,  83.4771102267f,  88.8009599641f,  94.2596024621f,  99.8516257721f, 105.5756798897f, 111.4304721019f, 117.4147628214f,
123.5273618408f, 129.7671249556f, 136.1329509083f, 142.6237786162f, 149.2385846489f, 155.9763809264f, 162.8362126148f, 169.8171561967f,
176.9183176987f, 184.1388310586f, 191.4778566203f, 198.9345797413f, 206.5082095043f, 214.1979775206f, 222.0031368198f, 229.9229608151f,
237.9567423395f, 246.1037927458f, 254.3634410657f, 262.7350332219f, 271.2179312902f, 279.811512807f,  288.5151701182f, 297.328309767f,
306.2503519176f, 315.2807298113f, 324.4188892539f, 333.6642881308f, 343.0163959492f, 352.4746934041f, 362.0386719675f, 371.7078334993f,
381.4816898771f, 391.3597626457f, 401.341582683f,  411.4266898831f, 421.6146328537f, 431.9049686285f, 442.2972623931f, 452.791087223f,
463.3860238336f, 474.0816603423f, 484.8775920394f, 495.7734211711f, 506.7687567296f, 517.8632142543f, 529.0564156397f, 540.3479889518f,
551.7375682528f, 563.2247934311f, 574.8093100402f, 586.4907691422f, 598.2688271583f, 610.1431457251f, 622.1133915559f, 634.1792363075f,
646.3403564521f, 658.5964331536f, 670.9471521484f, 683.392203631f,  695.9312821432f, 708.564086467f,  721.290319522f,  734.1096882658f,
747.0219035976f, 760.0266802657f, 773.1237367775f };

/* 118 cycles power(value, 1.7), input precision 0.5, max value 50 */
float power1_7(float value)
{
	int index = (int)(value*2);
	index = ClipMinMax(index, 0, 100);
	return POW1_7_2x[index];
}
